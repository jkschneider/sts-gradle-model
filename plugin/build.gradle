import groovy.transform.Canonical
import org.gradle.api.internal.artifacts.component.DefaultModuleComponentSelector
import org.gradle.api.internal.artifacts.component.DefaultProjectComponentSelector
import org.gradle.language.base.artifact.SourcesArtifact
import org.gradle.language.java.artifact.JavadocArtifact
import org.gradle.plugins.ide.internal.IdeDependenciesExtractor
import org.gradle.plugins.ide.internal.resolver.DefaultIdeDependencyResolver
import org.gradle.runtime.jvm.JvmLibrary
import org.gradle.tooling.model.GradleModuleVersion

dependencies {
    compile project(':model')
}

task listDependencies << {
    project.configurations.compile.incoming.resolutionResult.allDependencies.each { dep ->
        if(dep.requested instanceof DefaultProjectComponentSelector) {
            println 'project: ' + dep.requested.projectPath
        }
        else if(dep.requested instanceof DefaultModuleComponentSelector) {
            println 'module: ' + dep.requested.group + ' ' + dep.requested.module + ' ' + dep.requested.version
        }
//        println dep.requested.properties
//        println dep.requested.displayName
    }

    project.configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
        it.allModuleArtifacts.each {
            println it.getType() + '->' + it.getFile()
        }
    }
}

task listDependencies2 << {
    new IdeDependenciesExtractor().extractRepoFileDependencies(
        project.dependencies,
        [project.configurations.compile],
        [],
        true,
        true
    ).each {
        println it.file.absolutePath + ' ' + it.sourceFile.absolutePath
    }
}

task listDependencies3 << {
    println 'repo: '
    new DefaultIdeDependencyResolver().getIdeRepoFileDependencies(project.configurations.compile).each {
        println it.file
    }

    println 'project: '
    new DefaultIdeDependencyResolver().getIdeProjectDependencies(project.configurations.compile, project).each {
        println it.project.name
    }
}

@Canonical
class ExternalDependency {
    File file
    File sourceFile
    File javadocFile
    GradleModuleVersion moduleVersion
}

task listDependencies4 << {
    def externalDependenciesById = [:]

    def binaryDependencies = project.configurations.compile.incoming.resolutionResult.allDependencies.inject([]) { mods, dep ->
        if(dep.requested instanceof DefaultModuleComponentSelector)
            mods += dep.selected.id
        return mods
    }

    def binaryComponents = project.dependencies.createArtifactResolutionQuery()
                        .forComponents(*binaryDependencies)
                        .withArtifacts(JvmLibrary.class, *[SourcesArtifact, JavadocArtifact])
                        .execute()
                        .getResolvedComponents()

    def binaryDependenciesAsStrings = binaryDependencies*.toString()

    // set the compile jar
    project.configurations.compile.resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.SATISFIES_ALL).each {
        def id = it.moduleVersion.id.toString()
        if(binaryDependenciesAsStrings.contains(id))
            externalDependenciesById[id] = new ExternalDependency(it.file)
    }

    binaryComponents.each { binaryDependency ->
        def externalDependency = externalDependenciesById[binaryDependency.id.toString()]

        // set the sources jar
        binaryDependency.getArtifacts(SourcesArtifact).each { sourcesResult ->
            externalDependency.sourceFile = sourcesResult.file
        }

        // set the javadoc jar
        binaryDependency.getArtifacts(JavadocArtifact).each { javadocResult ->
            externalDependency.javadocFile = javadocResult.file
        }
    }

    externalDependenciesById.values().each {
        println it.file
        println '  ' + it.sourceFile
        println '  ' + it.javadocFile
    }
}